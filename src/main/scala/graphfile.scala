  /***************************************************************************
   * abstract class to read in file
   * and construct GraphFrame
   * vertices: | idx , name , module |
   * edges: | idx1 , idx2 , exit prob. w/o tele |
   * this GraphFrame structure is the one to hold the entire graph information
   * which can be used to generate Network object for community detection
   ***************************************************************************/

import org.apache.spark.sql._
import org.graphframes._

abstract class GraphFile(
  sqlContext: SQLContext, filename: String
)
{
  // class only holds this object
  // which is generated by the particular derived class
  // usage:
  // val graph: GraphFrame = GraphFile( sqlContext, filename ).graph
  val graph: GraphFrame
}

object GraphFile
{
  // simple factory to return the appropriate GraphFile reader
  // based on file extension
  def openFile( sqlContext: SQLContext, filename: String ): GraphFile = {
    val extension = filename.split(".").lastOption
    extension match {
      case None => throw new Exception("Graph file has no file extension")
      case Some(ext) => {
        if( ext.toLowerCase == "net" )
          new PajekFile( sqlContext, filename )
        else if( ext.toLowerCase == "pqt" )
          new ParquetFiles( sqlContext, filename )
        else
          throw new Exception(
            "File must be Pajek net file (.net) or Parquet file (.pqt)"
          )
      }
    }
  }
}
